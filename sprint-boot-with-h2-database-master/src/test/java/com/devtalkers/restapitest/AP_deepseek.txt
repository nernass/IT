```java
package com.devtalkers.restapitest.controllers;

import com.devtalkers.restapitest.entity.User;
import com.devtalkers.restapitest.service.UserService;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(UserController.class)
class UserControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserService userService;

    @Test
    void getUserById_validId_returnsUser() throws Exception {
        User mockUser = new User();
        mockUser.setId(1);
        mockUser.setName("John Doe");

        Mockito.when(userService.getUserById(1)).thenReturn(mockUser);

        mockMvc.perform(MockMvcRequestBuilders.get("/user/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("John Doe"));
    }

    @Test
    void saveUser_validInput_returnsCreatedUser() throws Exception {
        User mockUser = new User();
        mockUser.setName("Jane Doe");
        mockUser.setEmail("jane@example.com");

        Mockito.when(userService.saveUser(Mockito.any(User.class))).thenReturn(mockUser);

        mockMvc.perform(MockMvcRequestBuilders.post("/user")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"Jane Doe\",\"email\":\"jane@example.com\"}"))
                .andExpect(status().isCreated());
    }

    @Test
    void getUserById_nonExistentId_returnsNotFound() throws Exception {
        Mockito.when(userService.getUserById(99)).thenThrow(new RuntimeException("User not found"));

        mockMvc.perform(MockMvcRequestBuilders.get("/user/99"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void saveUser_invalidData_handlesValidation() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.post("/user")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"\"}")) // Empty name
                .andExpect(status().is4xxClientError());
    }
}
```