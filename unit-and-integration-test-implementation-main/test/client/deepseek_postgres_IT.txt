```python
import pytest
import pandas as pd
from src.postgres_client import PostgresClient
from src.config.postgres_client_config import PostgresClientConfig
from test.abstract_integration_test_class import AbstractIntegrationTestClass


class TestPostgresIntegration(AbstractIntegrationTestClass):
    @classmethod
    def setup_class(cls):
        super().setup()
        cls.pg_client = PostgresClient(cls.postgres_client_config)
        
    @classmethod
    def teardown_class(cls):
        super().tear_down()

    def setup_method(self):
        conn = self.create_connection()
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS test.musician (name VARCHAR, surname VARCHAR, age INT, instrument VARCHAR);")
        conn.commit()
        cursor.close()
        conn.close()

    def teardown_method(self):
        conn = self.create_connection()
        cursor = conn.cursor()
        cursor.execute("DROP TABLE IF EXISTS test.musician CASCADE;")
        conn.commit()
        cursor.close()
        conn.close()

    def test_should_retrieve_musician(self):
        # Given
        test_df = pd.DataFrame([{
            'name': 'john',
            'surname': 'doe',
            'age': 35,
            'instrument': 'guitar'
        }])
        self.pg_client.save(test_df)

        # When
        result = self.pg_client.retrieve_musician('john')

        # Then
        assert len(result) == 1
        assert result.iloc[0]['name'] == 'john'
        assert result.iloc[0]['instrument'] == 'guitar'

    def test_should_save_musician(self):
        # Given
        test_df = pd.DataFrame([{
            'name': 'mike',
            'surname': 'smith',
            'age': 40,
            'instrument': 'drums'
        }])

        # When
        self.pg_client.save(test_df)
        result = self.pg_client.retrieve_musician('mike')

        # Then
        assert len(result) == 1
        assert result.iloc[0]['surname'] == 'smith'

    def test_should_handle_invalid_query(self):
        # When
        result = self.pg_client.retrieve_musician('invalid_name')
        
        # Then
        assert result.empty

    def test_config_initialization(self):
        # When
        config = PostgresClientConfig(
            "localhost", "5432", "test-db", "username", "password"
        )
        
        # Then
        assert config.database == "test-db"
        assert config.user_name == "username"
```