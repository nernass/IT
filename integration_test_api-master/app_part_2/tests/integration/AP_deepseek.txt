```python
import pytest
from unittest.mock import patch, Mock
from pymongo import MongoClient
from pymongo.errors import PyMongoError
from fastapi.testclient import TestClient
from db import get_db
from main import process_order, app
from enums import OrderStatus
from exceptions.common import DeliveryRegistrationError
from models.models import Order

class TestIntegration:
    @pytest.fixture(autouse=True)
    def setup_and_teardown(self):
        self.client = TestClient(app)
        self.mongo_client = MongoClient()
        self.test_db = self.mongo_client["test_config"]
        self.test_orders = self.test_db.orders
        self.test_orders.delete_many({})
        yield
        self.test_orders.delete_many({})

    @patch("main.ByCicleAPI")
    def test_successful_order_processing(self, mock_delivery):
        mock_instance = mock_delivery.return_value
        mock_instance.register_order.return_value = {"status": OrderStatus.PROCESSING}
        
        raw_order = {"id": "1", "items": ["guitar"], "address": "street"}
        result = process_order(raw_order, self.test_db)
        
        assert result.status == OrderStatus.PROCESSING
        db_entry = self.test_orders.find_one({"id": "1"})
        assert db_entry["status"] == OrderStatus.PROCESSING.value

    @patch("main.ByCicleAPI")
    def test_delivery_failure_handling(self, mock_delivery):
        mock_instance = mock_delivery.return_value
        mock_instance.register_order.side_effect = DeliveryRegistrationError
        
        raw_order = {"id": "2", "items": ["drums"], "address": "avenue"}
        result = process_order(raw_order, self.test_db)
        
        assert result.status == OrderStatus.FAILED
        db_entry = self.test_orders.find_one({"id": "2"})
        assert db_entry["status"] == OrderStatus.FAILED.value

    def test_invalid_order_data_handling(self):
        with pytest.raises(Exception):
            raw_order = {"invalid": "data"}
            process_order(raw_order, self.test_db)
        
        assert self.test_orders.count_documents({}) == 0
```