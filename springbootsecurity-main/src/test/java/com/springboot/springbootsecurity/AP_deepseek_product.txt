```java
package com.springboot.springbootsecurity.product.controller;

import com.springboot.springbootsecurity.common.model.CustomPage;
import com.springboot.springbootsecurity.common.model.dto.response.CustomPagingResponse;
import com.springboot.springbootsecurity.common.model.dto.response.CustomResponse;
import com.springboot.springbootsecurity.product.model.Product;
import com.springboot.springbootsecurity.product.model.dto.request.ProductCreateRequest;
import com.springboot.springbootsecurity.product.model.dto.request.ProductPagingRequest;
import com.springboot.springbootsecurity.product.model.dto.request.ProductUpdateRequest;
import com.springboot.springbootsecurity.product.model.dto.response.ProductResponse;
import com.springboot.springbootsecurity.product.service.*;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;
import java.math.BigDecimal;
import java.util.Collections;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ProductController.class)
class ProductControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProductCreateService productCreateService;

    @MockBean
    private ProductReadService productReadService;

    @MockBean
    private ProductUpdateService productUpdateService;

    @MockBean
    private ProductDeleteService productDeleteService;

    private final ObjectMapper mapper = new ObjectMapper();

    @Test
    void createProduct_validRequest_returnsProductId() throws Exception {
        ProductCreateRequest request = ProductCreateRequest.builder()
                .name("Laptop")
                .amount(new BigDecimal("10.5"))
                .unitPrice(new BigDecimal("999.99"))
                .build();

        Product mockProduct = Product.builder().id("123").build();
        Mockito.when(productCreateService.createProduct(request)).thenReturn(mockProduct);

        mockMvc.perform(post("/api/v1/products")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response").value("123"));
    }

    @Test
    void getProductById_validId_returnsProduct() throws Exception {
        Product mockProduct = Product.builder()
                .id("123")
                .name("Laptop")
                .amount(new BigDecimal("5"))
                .unitPrice(new BigDecimal("1200"))
                .build();

        Mockito.when(productReadService.getProductById("123")).thenReturn(mockProduct);

        mockMvc.perform(get("/api/v1/products/123"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.id").value("123"));
    }

    @Test
    void updateProduct_validRequest_returnsUpdatedProduct() throws Exception {
        ProductUpdateRequest request = ProductUpdateRequest.builder()
                .name("Updated Laptop")
                .amount(new BigDecimal("15"))
                .unitPrice(new BigDecimal("1500"))
                .build();

        Product mockProduct = Product.builder()
                .id("123")
                .name("Updated Laptop")
                .amount(new BigDecimal("15"))
                .unitPrice(new BigDecimal("1500"))
                .build();

        Mockito.when(productUpdateService.updateProductById("123", request)).thenReturn(mockProduct);

        mockMvc.perform(put("/api/v1/products/123")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.name").value("Updated Laptop"));
    }

    @Test
    void deleteProduct_validId_returnsSuccess() throws Exception {
        mockMvc.perform(delete("/api/v1/products/123"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.isSuccess").value(true));
    }

    @Test
    void createProduct_invalidAmount_returnsBadRequest() throws Exception {
        ProductCreateRequest request = ProductCreateRequest.builder()
                .name("")
                .amount(new BigDecimal("-1"))
                .unitPrice(new BigDecimal("0"))
                .build();

        mockMvc.perform(post("/api/v1/products")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void getProductById_nonExistentId_throwsError() throws Exception {
        Mockito.when(productReadService.getProductById("456"))
                .thenThrow(new RuntimeException("Product not found"));

        mockMvc.perform(get("/api/v1/products/456"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void getProducts_validPaging_returnsPagedResults() throws Exception {
        ProductPagingRequest request = new ProductPagingRequest();
        CustomPage<Product> mockPage = new CustomPage<>(Collections.emptyList(), 0, 0, 0);
        Mockito.when(productReadService.getProducts(request)).thenReturn(mockPage);

        mockMvc.perform(get("/api/v1/products")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.totalElements").value(0));
    }
}
```