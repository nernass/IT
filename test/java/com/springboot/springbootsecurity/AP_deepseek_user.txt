```java
package com.springboot.springbootsecurity.user.controller;

import com.springboot.springbootsecurity.auth.model.Token;
import com.springboot.springbootsecurity.auth.model.dto.request.LoginRequest;
import com.springboot.springbootsecurity.auth.model.dto.request.TokenRefreshRequest;
import com.springboot.springbootsecurity.auth.model.dto.response.TokenResponse;
import com.springboot.springbootsecurity.common.model.dto.response.CustomResponse;
import com.springboot.springbootsecurity.user.model.dto.request.UserRegisterRequest;
import com.springboot.springbootsecurity.user.service.*;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(UserAuthController.class)
class UserAuthControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserRegisterService userRegisterService;

    @MockBean
    private UserLoginService userLoginService;

    @MockBean
    private UserRefreshTokenService userRefreshTokenService;

    @MockBean
    private UserLogoutService userLogoutService;

    private final ObjectMapper mapper = new ObjectMapper();

    @Test
    void registerUser_validRequest_returnsSuccess() throws Exception {
        UserRegisterRequest request = UserRegisterRequest.builder()
            .email("test@example.com")
            .password("validPass123")
            .firstName("John")
            .lastName("Doe")
            .phoneNumber("12345678901")
            .build();

        mockMvc.perform(post("/api/v1/authentication/user/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response").value("SUCCESS"));
    }

    @Test
    void loginUser_validCredentials_returnsTokens() throws Exception {
        LoginRequest request = new LoginRequest();
        request.setEmail("test@example.com");
        request.setPassword("password123");

        Token mockToken = Token.builder()
            .accessToken("jwt.access")
            .refreshToken("jwt.refresh")
            .accessTokenExpiresAt(3600L)
            .build();

        Mockito.when(userLoginService.login(request)).thenReturn(mockToken);

        mockMvc.perform(post("/api/v1/authentication/user/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.accessToken").value("jwt.access"))
                .andExpect(jsonPath("$.response.refreshToken").value("jwt.refresh"));
    }

    @Test
    void refreshToken_validRequest_returnsNewTokens() throws Exception {
        TokenRefreshRequest request = new TokenRefreshRequest();
        request.setRefreshToken("valid.refresh.token");

        Token mockToken = Token.builder()
            .accessToken("new.jwt.access")
            .refreshToken("new.jwt.refresh")
            .accessTokenExpiresAt(7200L)
            .build();

        Mockito.when(userRefreshTokenService.refreshToken(request)).thenReturn(mockToken);

        mockMvc.perform(post("/api/v1/authentication/user/refresh-token")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.response.accessToken").value("new.jwt.access"));
    }

    @Test
    void registerUser_invalidEmail_returnsBadRequest() throws Exception {
        UserRegisterRequest request = UserRegisterRequest.builder()
            .email("invalid-email")
            .password("short")
            .firstName("")
            .lastName("")
            .phoneNumber("123")
            .build();

        mockMvc.perform(post("/api/v1/authentication/user/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void loginUser_serviceThrowsError_returnsInternalError() throws Exception {
        LoginRequest request = new LoginRequest();
        request.setEmail("error@test.com");
        request.setPassword("wrongpass");

        Mockito.when(userLoginService.login(request))
            .thenThrow(new RuntimeException("Authentication failed"));

        mockMvc.perform(post("/api/v1/authentication/user/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(request)))
                .andExpect(status().isInternalServerError());
    }
}
```