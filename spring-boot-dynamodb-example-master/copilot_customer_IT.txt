import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;

import org.springframework.test.context.TestPropertySource;
import org.springframework.test.web.servlet.MockMvc;

import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import org.springframework.web.context.WebApplicationContext;

import java.util.Collections;
import java.util.Optional;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
@TestPropertySource(locations = "classpath:application-test.properties")
public class CustomerIntegrationTest {

    @Autowired
    private WebApplicationContext context;

    private MockMvc mockMvc;

    @MockBean
    private CustomerRepository customerRepository;

    @BeforeEach
    public void setup() {
        // Initialize MockMvc object
        mockMvc = MockMvcBuilders.webAppContextSetup(context).build();

        // Placeholder for mocking CustomerRepository methods
        // e.g., Mockito.when(customerRepository.read(Mockito.anyString())).thenReturn(Optional.empty());
    }

    @Test
    public void testGetCustomerList_NoCustomers() throws Exception {
        // Mock the repository to return an empty list
        Mockito.when(customerRepository.readAll()).thenReturn(Collections.emptyList());

        // Perform GET /v1/customer
        mockMvc.perform(get("/v1/customer"))
                .andExpect(status().isNoContent());
    }

    @Test
    public void testCreateCustomer_Success() throws Exception {
        // Prepare test customer data
        Customer testCustomer = new Customer()
                .withName("John Doe")
                .withAddress("123 Main St")
                .withPhoneNumber("555-1234");

        // Mock the repository to return empty when reading by name
        Mockito.when(customerRepository.read("John Doe")).thenReturn(Optional.empty());

        // Mock the save method
        Mockito.doNothing().when(customerRepository).save(Mockito.any(Customer.class));

        // Perform POST /v1/customer
        mockMvc.perform(post("/v1/customer")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"John Doe\",\"address\":\"123 Main St\",\"phoneNumber\":\"555-1234\"}"))
                .andExpect(status().isCreated());
    }

    @Test
    public void testCreateCustomer_Conflict() throws Exception {
        // Prepare test customer data
        Customer existingCustomer = new Customer()
                .withName("Jane Doe")
                .withAddress("123 Main St")
                .withPhoneNumber("555-5678");

        // Mock the repository to return existing customer
        Mockito.when(customerRepository.read("Jane Doe")).thenReturn(Optional.of(existingCustomer));

        // Perform POST /v1/customer
        mockMvc.perform(post("/v1/customer")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"name\":\"Jane Doe\",\"address\":\"123 Main St\",\"phoneNumber\":\"555-5678\"}"))
                .andExpect(status().isConflict());
    }

    @Test
    public void testGetCustomer_Found() throws Exception {
        // Prepare test customer data
        Customer testCustomer = new Customer()
                .withName("John Doe")
                .withAddress("123 Main St")
                .withPhoneNumber("555-1234");

        // Mock the repository to return the customer
        Mockito.when(customerRepository.read("John Doe")).thenReturn(Optional.of(testCustomer));

        // Perform GET /v1/customer/{name}
        mockMvc.perform(get("/v1/customer/John Doe"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("John Doe"))
                .andExpect(jsonPath("$.address").value("123 Main St"))
                .andExpect(jsonPath("$.phoneNumber").value("555-1234"));
    }

    @Test
    public void testGetCustomer_NotFound() throws Exception {
        // Mock the repository to return empty
        Mockito.when(customerRepository.read("Nonexistent")).thenReturn(Optional.empty());

        // Perform GET /v1/customer/{name}
        mockMvc.perform(get("/v1/customer/Nonexistent"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void testDeleteCustomer_Success() throws Exception {
        // Prepare test customer data
        Customer testCustomer = new Customer()
                .withName("John Doe");

        // Mock the repository to return the customer
        Mockito.when(customerRepository.read("John Doe")).thenReturn(Optional.of(testCustomer));

        // Mock the delete method
        Mockito.doNothing().when(customerRepository).delete("John Doe");

        // Perform DELETE /v1/customer/{name}
        mockMvc.perform(delete("/v1/customer/John Doe"))
                .andExpect(status().isNoContent());
    }

    @Test
    public void testDeleteCustomer_NotFound() throws Exception {
        // Mock the repository to return empty
        Mockito.when(customerRepository.read("Nonexistent")).thenReturn(Optional.empty());

        // Perform DELETE /v1/customer/{name}
        mockMvc.perform(delete("/v1/customer/Nonexistent"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void testUpdateCustomer_Put_Success() throws Exception {
        // Prepare existing customer data
        Customer existingCustomer = new Customer()
                .withName("John Doe")
                .withAddress("123 Main St")
                .withPhoneNumber("555-1234");

        // Mock the repository to return the existing customer
        Mockito.when(customerRepository.read("John Doe")).thenReturn(Optional.of(existingCustomer));

        // Mock the save method
        Mockito.doNothing().when(customerRepository).save(Mockito.any(Customer.class));

        // Perform PUT /v1/customer/{name}
        mockMvc.perform(put("/v1/customer/John Doe")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"address\":\"456 Park Ave\",\"phoneNumber\":\"555-5678\"}"))
                .andExpect(status().isOk());
    }

    @Test
    public void testUpdateCustomer_Patch_Success() throws Exception {
        // Prepare existing customer data
        Customer existingCustomer = new Customer()
                .withName("John Doe")
                .withAddress("123 Main St")
                .withPhoneNumber("555-1234");

        // Mock the repository to return the existing customer
        Mockito.when(customerRepository.read("John Doe")).thenReturn(Optional.of(existingCustomer));

        // Mock the save method
        Mockito.doNothing().when(customerRepository).save(Mockito.any(Customer.class));

        // Perform PATCH /v1/customer/{name}
        mockMvc.perform(patch("/v1/customer/John Doe")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"phoneNumber\":\"555-5678\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.phoneNumber").value("555-5678"));
    }

    @Test
    public void testUpdateCustomer_NotFound() throws Exception {
        // Mock the repository to return empty
        Mockito.when(customerRepository.read("Nonexistent")).thenReturn(Optional.empty());

        // Perform PUT /v1/customer/{name}
        mockMvc.perform(put("/v1/customer/Nonexistent")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"address\":\"456 Park Ave\",\"phoneNumber\":\"555-5678\"}"))
                .andExpect(status().isNotFound());
    }
}
