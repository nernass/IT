```java
package com.sn.controller;

import com.sn.model.Employee;
import com.sn.repository.EmployeeRepository;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.List;
import java.util.Optional;
import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class EmployeeControllerIntegrationTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @MockBean
    private EmployeeRepository employeeRepository;

    @Test
    void getEmployees_validRequest_returnsAllEmployees() {
        Employee mockEmployee = Employee.builder()
            .id(1L)
            .firstName("John")
            .lastName("Doe")
            .email("john@example.com")
            .build();
        
        Mockito.when(employeeRepository.findAll())
            .thenReturn(List.of(mockEmployee));

        ResponseEntity<List> response = restTemplate.getForEntity("/api/employees/", List.class);
        
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).hasSize(1);
    }

    @Test
    void getEmployeeById_validId_returnsEmployee() {
        Employee mockEmployee = Employee.builder()
            .id(1L)
            .firstName("Jane")
            .lastName("Smith")
            .email("jane@example.com")
            .build();
        
        Mockito.when(employeeRepository.findById(1L))
            .thenReturn(Optional.of(mockEmployee));

        ResponseEntity<Employee> response = restTemplate.getForEntity("/api/employees/1", Employee.class);
        
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody().getEmail()).isEqualTo("jane@example.com");
    }

    @Test
    void saveEmployee_validInput_returnsCreatedEmployee() {
        Employee newEmployee = Employee.builder()
            .firstName("Alice")
            .lastName("Johnson")
            .email("alice@example.com")
            .build();

        Mockito.when(employeeRepository.save(newEmployee))
            .thenReturn(newEmployee.toBuilder().id(2L).build());

        ResponseEntity<Employee> response = restTemplate.postForEntity(
            "/api/employees/save",
            newEmployee,
            Employee.class
        );
        
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody().getId()).isEqualTo(2L);
    }

    @Test
    void getEmployeeById_invalidId_returnsNotFound() {
        Mockito.when(employeeRepository.findById(99L))
            .thenReturn(Optional.empty());

        ResponseEntity<Employee> response = restTemplate.getForEntity("/api/employees/99", Employee.class);
        
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }

    @Test
    void testEmployees_returnsHardcodedData() {
        ResponseEntity<Employee> response = restTemplate.getForEntity("/api/employees/test", Employee.class);
        
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody().getFirstName()).isEqualTo("Subhasish");
    }
}
```