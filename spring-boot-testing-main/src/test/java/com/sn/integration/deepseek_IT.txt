```java
package com.sn.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.sn.model.Employee;
import com.sn.service.EmployeeService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
class EmployeeControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private EmployeeService employeeService;

    private Employee testEmployee;

    @BeforeEach
    void setup() {
        testEmployee = Employee.builder()
                .id(1L)
                .firstName("John")
                .lastName("Doe")
                .email("john@example.com")
                .build();
    }

    @Test
    void getEmployees_ValidRequest_ReturnsList() throws Exception {
        when(employeeService.getEmployees()).thenReturn(List.of(testEmployee));

        mockMvc.perform(MockMvcRequestBuilders.get("/api/employees/"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1L))
                .andExpect(jsonPath("$[0].firstName").value("John"));
    }

    @Test
    void getEmployeeById_ValidId_ReturnsEmployee() throws Exception {
        when(employeeService.getEmployeeById(1L)).thenReturn(testEmployee);

        mockMvc.perform(MockMvcRequestBuilders.get("/api/employees/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.email").value("john@example.com"));
    }

    @Test
    void saveEmployee_ValidRequest_ReturnsCreated() throws Exception {
        when(employeeService.saveEmployee(any())).thenReturn(testEmployee);

        mockMvc.perform(MockMvcRequestBuilders.post("/api/employees/save")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testEmployee)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.lastName").value("Doe"));
    }

    @Test
    void testEmployees_Endpoint_ReturnsHardcodedData() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/employees/test"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.firstName").value("Subhasish"))
                .andExpect(jsonPath("$.email").value("subhasish.nag1@gmail.com"));
    }
}
```